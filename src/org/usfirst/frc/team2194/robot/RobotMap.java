// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc.team2194.robot;

import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CANTalon.FeedbackDevice;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static TalonSRX driveLeftMotor1;
	// public static SpeedController driveLeftMotor2;
	public static TalonSRX driveRightMotor1;
	// public static SpeedController driveRightMotor2;
	public static AnalogGyro driveTrainGyro;

	public static Encoder leftEncoder;
	public static Encoder rightEncoder;

	
	public static CANTalon leftShooterMotor;
	public static CANTalon rightShooterMotor;
	public static CANTalon angleShooterMotor;
	public static CANTalon robotLiftMotor;
	
	
	public static DigitalInput rampEdgeDetect;
	public static DigitalGlitchFilter eyeFilter;
	
	public static DigitalOutput lidarPowerEnable;
	public static DigitalOutput lidarMode;
	public static Counter pwmWidth;
	
	public static Compressor compressor;
	public static AnalogInput airPressure;
	
	public static AnalogTrigger shooterHomeSwitch;
	
	public static DoubleSolenoid driveShifter;
	public static DoubleSolenoid liftOne;
	public static DoubleSolenoid liftTwo;
	public static DoubleSolenoid portcullisChevalManipulator;
	public static DoubleSolenoid shootTrigger;
	
//	public static Solenoid shootTrigger;
	
	public static Solenoid flashLight;
	
	public static PowerDistributionPanel pdp;


	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	public static void init() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		driveLeftMotor1 = new TalonSRX(3);
		driveRightMotor1 = new TalonSRX(4);
		driveRightMotor1.setInverted(true);

		// driveLeftMotor2 = new Victor(1, 2);
		LiveWindow.addActuator("LeftSideDrive", "Left Motor 1",
				(TalonSRX) driveLeftMotor1);
		LiveWindow.addActuator("RightSideDrive", "Right Motor 1",
				(TalonSRX) driveRightMotor1);

		leftEncoder = new Encoder(2, 3);
		leftEncoder.setPIDSourceType(PIDSourceType.kRate);
		leftEncoder.setSamplesToAverage(10);

		rightEncoder = new Encoder(0, 1);
		rightEncoder.setPIDSourceType(PIDSourceType.kRate);
		rightEncoder.setSamplesToAverage(10);
		
//start of shooter declarations
		robotLiftMotor = new CANTalon(6);
		robotLiftMotor.changeControlMode(CANTalon.TalonControlMode.PercentVbus);
		robotLiftMotor.configPeakOutputVoltage(12.f, -12.f);
		
		leftShooterMotor = new CANTalon(8); // Initialize the CanTalonSRX.
		leftShooterMotor.setInverted(false);
		leftShooterMotor.setEncPosition(0);
		leftShooterMotor.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		leftShooterMotor.reverseSensor(true);
		leftShooterMotor.reverseOutput(false);
		leftShooterMotor.enableForwardSoftLimit(false);
		leftShooterMotor.enableReverseSoftLimit(false);
		leftShooterMotor.setSafetyEnabled(true);
		leftShooterMotor.configPeakOutputVoltage(12.f, -12.f);
		leftShooterMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
		leftShooterMotor.setPID(.07, .2, .2, .03, 100, 36, 0);//.1, .001, 1, .0267, 100, 36, 0);//p, i, d, ff, izone, ramprate, profile 0
		leftShooterMotor.setPID(.1, .001, 1, .0267, 100, 36, 1);//p, i, d, ff, izone, ramprate, profile 1
		leftShooterMotor.setProfile(0);
	
		rightShooterMotor = new CANTalon(5); // Initialize the CanTalonSRX.
		rightShooterMotor.setInverted(false);

		rightShooterMotor.setEncPosition(0);
		rightShooterMotor.reverseOutput(false);
		rightShooterMotor.reverseSensor(true);
		rightShooterMotor.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		rightShooterMotor.enableForwardSoftLimit(false);
		rightShooterMotor.enableReverseSoftLimit(false);
		rightShooterMotor.setSafetyEnabled(true);
		rightShooterMotor.configPeakOutputVoltage(12.f, -12.f);
		rightShooterMotor.changeControlMode(CANTalon.TalonControlMode.Speed);
		rightShooterMotor.setPID(.07, .2, .2, .03, 100, 36, 0);//.1, .001, 1, .0267, 100, 36, 0);//p, i, d, ff, izone, ramprate, profile 0
		rightShooterMotor.setPID(.1, .001, 1, .0267, 100, 36, 1);//p, i, d, ff, izone, ramprate, profile 1
		rightShooterMotor.setProfile(0);

		angleShooterMotor = new CANTalon(7); // Initialize the CanTalonSRX.
		angleShooterMotor.setInverted(false);
		angleShooterMotor.setEncPosition(0);
		angleShooterMotor.setFeedbackDevice(FeedbackDevice.CtreMagEncoder_Relative);
		angleShooterMotor.reverseSensor(false);
		angleShooterMotor.reverseOutput(false);
		angleShooterMotor.enableForwardSoftLimit(false);
		angleShooterMotor.enableReverseSoftLimit(false);
		angleShooterMotor.setSafetyEnabled(true);
		angleShooterMotor.configPeakOutputVoltage(12.f, -12.f);
		angleShooterMotor.enableBrakeMode(true);
		angleShooterMotor.ConfigRevLimitSwitchNormallyOpen(true);
		angleShooterMotor.ConfigFwdLimitSwitchNormallyOpen(true);
		angleShooterMotor.enableReverseSoftLimit(false);
		angleShooterMotor.changeControlMode(CANTalon.TalonControlMode.Position);
		angleShooterMotor.setPID(1.3, 0, 1, 0, 100, 36, 0);//p, i, d, ff, izone, ramprate, profile 0
		angleShooterMotor.setPID(.1, 0, 0, 0, 0, 36, 1);//p, i, d, ff, izone, ramprate, profile 1
		angleShooterMotor.setProfile(0);

		pwmWidth = new Counter(6); // get time of pwm high in microseconds
		pwmWidth.setSemiPeriodMode(true);// set counter for measuring pulse high
	
		lidarPowerEnable = new DigitalOutput(7);// lidar power enable
		lidarMode = new DigitalOutput(8);// lidar mode

		lidarPowerEnable.set(true);// enable lidar
		lidarMode.set(false);// set continuous mode
		
		rampEdgeDetect = new DigitalInput(9);
		eyeFilter = new DigitalGlitchFilter();
		eyeFilter.add(rampEdgeDetect);
		eyeFilter.setPeriodNanoSeconds(100000000);//100 msec value is in nano seconds
		
		compressor = new Compressor(2);
		airPressure = new AnalogInput(1);
		
		shooterHomeSwitch = new AnalogTrigger(2);
		shooterHomeSwitch.setAveraged(true);
		shooterHomeSwitch.setLimitsVoltage(0.9, 4.5);
		
		pdp = new PowerDistributionPanel(1);
		
		driveShifter = new DoubleSolenoid(2,0,7);
		liftOne = new DoubleSolenoid(1,3,4);
		liftTwo = new DoubleSolenoid(1,2,5);
//		liftTwo = new DoubleSolenoid(1,3,4);
//		liftOne = new DoubleSolenoid(1,2,5);

		portcullisChevalManipulator = new DoubleSolenoid(1,1,6);
		shootTrigger = new DoubleSolenoid(1,0,7);
		
//		shootTrigger = new Solenoid(2, 4);

		flashLight = new Solenoid(2, 1);

	}

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
